{"version":3,"sources":["utils/apiClient.js","hooks/asyncAction.js","containers/links/index.js"],"names":["checkStatus","response","status","parseJSON","json","then","Promise","reject","a","headers","get","text","ApiClient","path","options","url","process","formatUrl","fetchOptions","type","key","body","FormData","data","hasOwnProperty","append","JSON","stringify","user","parse","window","localStorage","getItem","token","Authorization","fetch","dataFetchReducer","state","action","isLoading","error","payload","useFetch","useReducer","dispatch","res","onSuccess","console","log","onError","Links","history","useHistory","useState","currentPage","setCurrentPage","doFetch","useEffect","fetchLinks","method","columns","title","dataIndex","render","record","size","onClick","e","push","linkId","value","linkHash","navigator","clipboard","writeText","message","success","spinning","dataSource","links","pagination","position","current","total","onChange","page","style","width"],"mappings":"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","file":"static/js/12.066b189d.chunk.js","sourcesContent":["function formatUrl(path) {\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  return process.env.REACT_APP_BASE_URL + adjustedPath;\n  // return adjustedPath;\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return parseJSON(response);\n  }\n  return response.json().then((json) => Promise.reject(json));\n}\n\nasync function parseJSON(response) {\n  if (response && response.headers) {\n    if (response.headers.get('Content-Type') === 'application/json') {\n      return await response.json();\n    }\n    if (response.headers.get('Content-Type') === 'text/plain;charset=UTF-8') {\n      return await response.text();\n    }\n  }\n  return response;\n}\n\nfunction ApiClient(path, options) {\n  const url = formatUrl(path);\n  const fetchOptions = options;\n  fetchOptions.headers = fetchOptions.headers || {};\n\n  if (fetchOptions.type === 'formdata') {\n    fetchOptions.body = new FormData();\n\n    for (let key in options.data) {\n      if (\n        typeof key === 'string' &&\n        options.data.hasOwnProperty(key) &&\n        typeof options.data[key] !== 'undefined'\n      ) {\n        fetchOptions.body.append(key, options.data[key]);\n      }\n    }\n  } else {\n    fetchOptions.body = JSON.stringify(options.data);\n    fetchOptions.headers['Content-Type'] = 'application/json';\n    fetchOptions.headers['Accept'] = 'application/json';\n  }\n\n  const user = JSON.parse(window.localStorage.getItem('user'));\n  if (user && user.token) {\n    fetchOptions.headers.Authorization = `Bearer ${user.token}`;\n  }\n\n  return fetch(url, { ...fetchOptions })\n    .then(checkStatus)\n    .then(parseJSON);\n}\nexport default ApiClient;\n","import { useReducer } from 'react';\nimport ApiClient from '../utils/apiClient';\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_INIT':\n      return { ...state, isLoading: true, error: null, response: null };\n    case 'FETCH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        error: null,\n        response: action.payload\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n        response: null\n      };\n    default:\n      return state;\n  }\n};\n\nfunction useFetch(action) {\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    error: null,\n    response: null\n  });\n\n  async function performAction(options) {\n    try {\n      dispatch({ type: 'FETCH_INIT' });\n\n      const res = await ApiClient(options.url, options);\n\n      action && action.onSuccess && action.onSuccess(res);\n      dispatch({ type: 'FETCH_SUCCESS', payload: res });\n    } catch (e) {\n      console.log('here', e);\n      // TODO: handle errors\n      action && action.onError && action.onError(e);\n      dispatch({ type: 'FETCH_FAILURE', payload: e });\n    }\n  }\n\n  return [state, performAction];\n}\nexport default useFetch;\n","import React, { useEffect, useState } from 'react';\nimport useFetch from '../../hooks/asyncAction';\nimport { useHistory } from 'react-router-dom';\nimport { Row, Table, Space, Spin, message } from 'antd';\n\nconst Links = () => {\n  const history = useHistory();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [{ response, isLoading, error }, doFetch] = useFetch();\n  useEffect(() => {\n    fetchLinks();\n  }, []);\n\n  const fetchLinks = async () => {\n    await doFetch({\n      url: `links`,\n      method: 'GET',\n    });\n  };\n  const copyToClipboard = (value) => {\n    navigator.clipboard.writeText(value);\n    message.success('Copied to Your Clipboard');\n  };\n\n  const columns = [\n    {\n      title: 'Link ID',\n      dataIndex: 'linkId',\n      key: 'linkId',\n    },\n    {\n      title: 'Link Hash',\n      dataIndex: 'linkHash',\n      key: 'linkHash',\n    },\n    {\n      title: 'Created at',\n      dataIndex: 'createAt',\n      key: 'createAt',\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <Space size='middle'>\n          <a onClick={(e) => history.push(`./links/${record.linkId}`)}>\n            View Report\n          </a>\n          {/* <a onClick={(e) => history.push(`./link/${record.linkId}`)}>Edit</a> */}\n          <a onClick={(e) => copyToClipboard(record.linkHash)}>Copy</a>\n        </Space>\n      ),\n    },\n  ];\n  return (\n    <Row>\n      <Spin spinning={isLoading}>\n        <Table\n          columns={columns}\n          dataSource={response ? response.links : []}\n          pagination={{\n            position: ['bottomCenter'],\n            size: 'small',\n            current: currentPage,\n            total: response ? response.links / 10 : 0,\n            onChange: (page) => {\n              setCurrentPage(page);\n            },\n          }}\n          style={{ width: '100%' }}\n        />\n      </Spin>\n    </Row>\n  );\n};\nexport default Links;\n"],"sourceRoot":""}